variables:
- group: dev-secrets
- group: dev-config

stages:
  - stage: PreDestroy
    displayName: "Preparation"
    jobs:
    - job: Backup_Job
      pool: 
        vmImage: 'ubuntu-latest'
      steps:
      - script: |
          echo "Backing up state file"
          timestamp=$(date +%Y%m%d-%H%M%S)
          az storage blob copy start \
            --account-name $(STORAGE_ACCOUNT_NAME) \
            --source-container $(container_name) \
            --source-blob $(STATE_KEY) \
            --destination-container $(container_name)-backups \
            --destination-blob $(STATE_KEY).$timestamp \
            --auth-mode login
        displayName: 'State File Backup'
        env:
          AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
          AZURE_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          AZURE_TENANT_ID: $(ARM_TENANT_ID)

  - stage: Destroy
    displayName: "Destroy Infrastructure"
    dependsOn: PreDestroy
    jobs:
    - deployment: Destroy_Job
      environment: Dev-Destroy
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            
            - script: |
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                
              displayName: 'Set Environment Variables'
              
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: $(tf_version)
                
            - task: TerraformCLI@0
              inputs:
                command: init
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                commandOptions: '-reconfigure'
                
            - task: TerraformCLI@0
              inputs:
                command: destroy
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                commandOptions: '-auto-approve -var="environment=$(environment)"'
                
            - script: |
                # Verify resource group is empty
                resources=$(az resource list -g $(resource_group) --query "[?contains(type, 'Microsoft.Storage') == \`false\`]" --output tsv)
                if [ -n "$resources" ]; then
                  echo "##vso[task.logissue type=error]Resources still exist in resource group!"
                  exit 1
                fi
              displayName: 'Resource Group Validation'
              env:
                AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
                AZURE_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                AZURE_TENANT_ID: $(ARM_TENANT_ID)