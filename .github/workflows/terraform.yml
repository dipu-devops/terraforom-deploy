name: Terraform


on:
  push:
    branches:
      - main
      - dev_env
      - qa_env
      - test
  pull_request:
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install Azure CLI
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # Login to Azure using a Service Principal
    - name: Login to Azure
      run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    # Retrieve Azure Storage Account Key
    # - name: Get Storage Account Key
    #   id: storage_key
    #   run: |
    #     key=$(az storage account keys list --account-name terraformdeployji --resource-group azureapp-resources --query '[0].value' -o tsv)
    #     echo "STORAGE_ACCOUNT_KEY=$key" >> $GITHUB_ENV

    # Initialize Terraform with Azure Storage as backend
    - name: Terraform Init
      run: |
        terraform init -backend-config="storage_account_name=terraformdeployji" -backend-config="container_name=tfstate" -backend-config="key=terraform.tfstate" -backend-config="access_key=$STORAGE_ACCOUNT_KEY"

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
