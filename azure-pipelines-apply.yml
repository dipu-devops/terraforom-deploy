variables:
- group: dev-secrets
- group: dev-config

stages:
  - stage: Plan
    displayName: "Terraform Plan"
    jobs:
    - job: Plan_Job
      pool: 
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
      
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: $(tf_version)
          
      - script: |
          echo "Configuring Terraform environment variables"
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          
        displayName: 'Set Terraform Environment Variables'
        
      - task: TerraformCLI@0
        inputs:
          command: init
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          commandOptions: '-reconfigure'
          
      - task: TerraformCLI@0
        inputs:
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          commandOptions: '-out=tfplan -var="environment=$(environment)"'
          
      - publish: $(System.DefaultWorkingDirectory)/tfplan
        artifact: tfplan

  - stage: Apply
    displayName: "Apply Changes"
    dependsOn: Plan
    condition: succeeded()
    jobs:
    - deployment: Apply_Job
      environment: Dev-Apply
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: tfplan
              
            - script: |
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                
              displayName: 'Set Environment Variables'
              
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: $(tf_version)
                
            - task: TerraformCLI@0
              inputs:
                command: apply
                commandOptions: '$(Pipeline.Workspace)/tfplan/tfplan'
                
            - script: |
                echo "Verifying state file"
                az storage blob show \
                  --account-name $(STORAGE_ACCOUNT_NAME) \
                  --container-name $(container_name) \
                  --name $(STATE_KEY) \
                  --auth-mode login
              displayName: 'State File Validation'
              env:
                AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
                AZURE_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                AZURE_TENANT_ID: $(ARM_TENANT_ID)